---
- set_fact:
    ORACLE_SID: "{{ DATABASE_NAME }}"
    remote_script_directory: "/tmp/ora_ansible_scripts_{{ DATABASE_NAME }}"
    remote_output_directory: "/tmp/ora_db_patch_{{ DATABASE_NAME }}"
    missing_packages: []
    
- name: Gather the package facts
  ansible.builtin.package_facts:
    manager: rpm

- name: Check whether pre-requisite packages are installed
  set_fact:
    missing_packages: "{{ missing_packages + [ item ] }}"
  when: 
    - item not in ansible_facts.packages
    - ansible_distribution == "RedHat"
  with_items:
  - bc
  - binutils
  - compat-libcap1
  - compat-libstdc++-33
  - elfutils-libelf
  - elfutils-libelf-devel
  - fontconfig-devel
  - glibc
  - glibc-devel
  - ksh
  - libaio
  - libaio-devel
  - libX11
  - libXau
  - libXi
  - libXtst
  - libXrender
  - libXrender-devel
  - libgcc
  - libstdc++
  - libstdc++-devel
  - libxcb
  - make
  - smartmontools
  - sysstat
  - xorg-x11-xauth
  #- xorg-x11-utils
        
- name: Fail if list is longer than none
  fail:
    msg: "Missing package; FAIL DUE TO THESE PACKAGES NOT BEING FOUND: {{ missing_packages }}"
  when: missing_packages|length>0

- name: Init Clean
  block:
    - name: Init Clean
      include_tasks: init_clean.yml
  ignore_errors: yes

- name: Validate DB Owner
  block:
  - name: Get the DB owner id
    shell: |
      ps -ef | grep -v grep | grep ora_pmon_{{ ORACLE_SID }} | awk '{print $1}'
    register: shell_output

  - name: Validate the DB owner id
    debug:
      msg: "Found DB Owner on {{ target }} is: {{ shell_output.stdout }} / Inventory lists DB Owner as: {{ sid_server_dict[ORACLE_SID].dbowner }}"
    failed_when: shell_output.stdout != sid_server_dict[ORACLE_SID].dbowner

- name: Add member to group
  block:
    - name: Add member to group
      include_tasks: group_membership.yml
      loop:
        - "{{sid_server_dict[DATABASE_NAME].dbowner}}"
      
- name: Run init
  become: yes
  become_user: "{{sid_server_dict[DATABASE_NAME].dbowner}}"
  block:
    - name: Create {{ remote_script_directory }}
      ansible.builtin.file:
        path: "{{ remote_script_directory }}"
        state: directory
        mode: "{{ script_permission }}"

    - name: Create roles/oracle_database_patch_role/files if not exist
      copy: 
        src: roles/oracle_database_patch_role/files/ 
        dest: "{{ remote_script_directory }}/oracle_database_patch_role" 
        mode: "{{ script_permission }}"

    - name: Create {{ remote_output_directory }}
      ansible.builtin.file:
        path: "{{ remote_output_directory }}"
        state: directory
        mode: "{{ script_permission }}"

    - set_fact:
        patch_file_prefix: "{{ 'AIX' if ansible_distribution == 'AIX' else 'LINUX' }}"
        
    - set_fact:
        patch_file_name: "{{ patch_file_prefix }}_jan{{ (ansible_date_time.year|string)[-2:] }}.tar.gz"

    - debug:
        msg: "The patch_file_name is: {{ patch_file_name }}"

    - name: Get database version
      shell: |
        {{ remote_script_directory }}/oracle_database_patch_role/database_version.bash {{ ORACLE_SID }}
      register: shell_output
      failed_when: shell_output.rc != 0

    - name: Ingest database version information
      ansible.builtin.slurp:
        src: "/tmp/ora_db_patch_{{ ORACLE_SID }}/db_version.txt"
      register: db_ver_slurp

    - set_fact:
        db_ver_long: "{{ db_ver_slurp['content']|b64decode|trim }}"
        
    - set_fact:
        db_ver: "{{ db_ver_long[:4] }}"
        
    - set_fact:
        artf_ver: "{{ '19.0.0' if db_ver == '19.0' else ( '12.2.0.1' if db_ver == '12.2' else '12.1.0.2' ) }}"
        
    - set_fact:
        #artifactory_repo: "https://artifactory.domain.com/artifactory/release/oracledatabase/{{ artf_ver }}"

    - debug:
        msg: "The artifactory_repo is: {{ artifactory_repo }}"

    - set_fact:
        patch_folder_prefix: "{{ '/u01/zdbcom' if is_siris == 'false' else '/z01/zdbgrd' }}"
        b_user: "{{ 'zdbcom' if is_siris == 'false' else 'zdbgrd' }}"
        
    - set_fact:
        patch_folder_name: "{{ patch_folder_prefix }}/software_dir/{{ db_ver }}/jan{{ (ansible_date_time.year|string)[-2:] }}_{{ ORACLE_SID }}"

    - name: Check for Sanity
      block:
      - set_fact:
          #repo_check: "{{ artifactory_repo[81:85] }}"
          repo_check: "{{ artifactory_repo[83:87] }}"
          folder_check: "{{ patch_folder_name[40:44] }}"
  
      - name:
        fail:
          msg: "Repo ({{ repo_check }}) and folder ({{ folder_check }}) version mismatch. Validate and retry"
        when: repo_check != folder_check

- name: Add member to group
  block:
    - name: Add member to group
      include_tasks: group_membership.yml
      loop:
        - "{{ b_user }}"
